//
//  RXTransformViewController.swift
//  RXSwiftDemo
//
//  Created by admin on 23/08/2019.
//  Copyright ¬© 2019 admin. All rights reserved.
//

import UIKit
import RxCocoa
import RxSwift

class RXTransformViewController: BaseViewController {

    let disposeBag = DisposeBag()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = .white
        // Do any additional setup after loading the view.
        groupByTest()
    }
    
    // ÂèòÊç¢Êìç‰ΩúÊåáÁöÑÊòØÂØπÂéüÂßãÁöÑ Observable Â∫èÂàóËøõË°å‰∏Ä‰∫õËΩ¨Êç¢ÔºåÁ±ª‰ºº‰∫é Swift ‰∏≠ CollectionType ÁöÑÂêÑÁßçËΩ¨Êç¢„ÄÇ
 
    /**
     1. map
     map Êìç‰ΩúÁ¨¶Â∞ÜÊ∫ê Observable ÁöÑÊØè‰∏™ÂÖÉÁ¥†Â∫îÁî®‰Ω†Êèê‰æõÁöÑËΩ¨Êç¢ÊñπÊ≥ïÔºåÁÑ∂ÂêéËøîÂõûÂê´ÊúâËΩ¨Êç¢ÁªìÊûúÁöÑ Observable„ÄÇ
     */
    func mapTest() -> Void {
        Observable.of(1, 2, 3).map{$0 * 10}.subscribe(onNext:{print($0)}).disposed(by: disposeBag)
    }
    
    /**
     2.flatMap
     Â∞Ü Observable ÁöÑÂÖÉÁ¥†ËΩ¨Êç¢ÊàêÂÖ∂‰ªñÁöÑ ObservableÔºåÁÑ∂ÂêéÂ∞ÜËøô‰∫õ Observables ÂêàÂπ∂
     */
    
    func flatMapTest() -> Void {
        let disposeBag = DisposeBag()
        let first = BehaviorSubject(value: "üë¶üèª")
        let second = BehaviorSubject(value: "üÖ∞Ô∏è")
        let variable = BehaviorRelay(value: first)
        
        variable.asObservable()
            .flatMap { $0 }
            .subscribe(onNext: { print($0) })
            .disposed(by: disposeBag)
        
        first.onNext("üê±")
        variable.accept(second)
        second.onNext("üÖ±Ô∏è")
        first.onNext("üê∂")
        
        /**
         üë¶üèª
         üê±
         üÖ∞Ô∏è
         üÖ±Ô∏è
         üê∂

         */
    }
    
    /**
     3.flatMapLatest
     Â∞Ü Observable ÁöÑÂÖÉÁ¥†ËΩ¨Êç¢ÊàêÂÖ∂‰ªñÁöÑ ObservableÔºåÁÑ∂ÂêéÂèñËøô‰∫õ Observables ‰∏≠ÊúÄÊñ∞ÁöÑ‰∏Ä‰∏™
     
     flatMapLatest Êìç‰ΩúÁ¨¶Â∞ÜÊ∫ê Observable ÁöÑÊØè‰∏Ä‰∏™ÂÖÉÁ¥†Â∫îÁî®‰∏Ä‰∏™ËΩ¨Êç¢ÊñπÊ≥ïÔºåÂ∞Ü‰ªñ‰ª¨ËΩ¨Êç¢Êàê Observables„ÄÇ‰∏ÄÊó¶ËΩ¨Êç¢Âá∫‰∏Ä‰∏™Êñ∞ÁöÑ ObservableÔºåÂ∞±Âè™ÂèëÂá∫ÂÆÉÁöÑÂÖÉÁ¥†ÔºåÊóßÁöÑ Observables ÁöÑÂÖÉÁ¥†Â∞ÜË¢´ÂøΩÁï•Êéâ„ÄÇ
     */
    
    func flatMapLatestTest() -> Void {
        let disposeBag = DisposeBag()
        let first = BehaviorSubject(value: "üë¶üèª")
        let second = BehaviorSubject(value: "üÖ∞Ô∏è")
        
        let variable = BehaviorRelay(value: first)
        
        variable.asObservable()
            .flatMapLatest { $0 }
            .subscribe(onNext: { print($0) })
            .disposed(by: disposeBag)
        
        first.onNext("üê±")
        variable.accept(second)
        
        second.onNext("üÖ±Ô∏è")
        first.onNext("üê∂")

    }
    
    /**
     4ÔºåflatMapFirst
     Ôºà1ÔºâÂü∫Êú¨‰ªãÁªç
     flatMapFirst ‰∏é flatMapLatest Ê≠£Â•ΩÁõ∏ÂèçÔºöflatMapFirst Âè™‰ºöÊé•Êî∂ÊúÄÂàùÁöÑ value ‰∫ã‰ª∂„ÄÇ
     ËØ•Êìç‰ΩúÁ¨¶ÂèØ‰ª•Èò≤Ê≠¢ÈáçÂ§çËØ∑Ê±ÇÔºö
     ÊØîÂ¶ÇÁÇπÂáª‰∏Ä‰∏™ÊåâÈíÆÂèëÈÄÅ‰∏Ä‰∏™ËØ∑Ê±ÇÔºåÂΩìËØ•ËØ∑Ê±ÇÂÆåÊàêÂâçÔºåËØ•ÊåâÈíÆÁÇπÂáªÈÉΩ‰∏çÂ∫îËØ•ÁªßÁª≠ÂèëÈÄÅËØ∑Ê±Ç„ÄÇ‰æøÂèØËØ•‰ΩøÁî® flatMapFirst Êìç‰ΩúÁ¨¶„ÄÇ
     */
    func flatMapFirst() -> Void {
        let subject1 = BehaviorSubject(value: "A")
        let subject2 = BehaviorSubject(value: "1")
        
        let variable = BehaviorRelay(value: subject1)
        
        variable.asObservable()
            .flatMapFirst { $0 }
            .subscribe(onNext: { print($0) })
            .disposed(by: disposeBag)
        
        subject1.onNext("B")
        variable.accept(subject2)
        subject2.onNext("2")
        subject1.onNext("C")
    }
    
    /**
     5Ôºåbuffer
     Ôºà1ÔºâÂü∫Êú¨‰ªãÁªç
     buffer ÊñπÊ≥ï‰ΩúÁî®ÊòØÁºìÂÜ≤ÁªÑÂêàÔºåÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ÊòØÁºìÂÜ≤Êó∂Èó¥ÔºåÁ¨¨‰∫å‰∏™ÂèÇÊï∞ÊòØÁºìÂÜ≤‰∏™Êï∞ÔºåÁ¨¨‰∏â‰∏™ÂèÇÊï∞ÊòØÁ∫øÁ®ã„ÄÇ
     ËØ•ÊñπÊ≥ïÁÆÄÂçïÊù•ËØ¥Â∞±ÊòØÁºìÂ≠ò Observable ‰∏≠ÂèëÂá∫ÁöÑÊñ∞ÂÖÉÁ¥†ÔºåÂΩìÂÖÉÁ¥†ËææÂà∞Êüê‰∏™Êï∞ÈáèÔºåÊàñËÄÖÁªèËøá‰∫ÜÁâπÂÆöÁöÑÊó∂Èó¥ÔºåÂÆÉÂ∞±‰ºöÂ∞ÜËøô‰∏™ÂÖÉÁ¥†ÈõÜÂêàÂèëÈÄÅÂá∫Êù•„ÄÇ
     */
    func buffer() -> Void {
        let subject = PublishSubject<String>()
        
        
        //ÊØèÁºìÂ≠ò3‰∏™ÂÖÉÁ¥†ÂàôÁªÑÂêàËµ∑Êù•‰∏ÄËµ∑ÂèëÂá∫„ÄÇ
        //Â¶ÇÊûú1ÁßíÈíüÂÜÖ‰∏çÂ§ü3‰∏™‰πü‰ºöÂèëÂá∫ÔºàÊúâÂá†‰∏™ÂèëÂá†‰∏™Ôºå‰∏Ä‰∏™ÈÉΩÊ≤°ÊúâÂèëÁ©∫Êï∞ÁªÑ []
        subject.buffer(timeSpan: DispatchTimeInterval.seconds(1), count: 3, scheduler: MainScheduler.instance).subscribe(onNext:{print($0)}).disposed(by: disposeBag)
        
        subject.onNext("a")
        subject.onNext("b")
        subject.onNext("c")
        
        subject.onNext("1")
        subject.onNext("2")
        subject.onNext("3")
    }
    
    /**
     6Ôºåwindow
     Ôºà1ÔºâÂü∫Êú¨‰ªãÁªç
     window Êìç‰ΩúÁ¨¶Âíå buffer ÂçÅÂàÜÁõ∏‰ºº„ÄÇ‰∏çËøá buffer ÊòØÂë®ÊúüÊÄßÁöÑÂ∞ÜÁºìÂ≠òÁöÑÂÖÉÁ¥†ÈõÜÂêàÂèëÈÄÅÂá∫Êù•ÔºåËÄå window Âë®ÊúüÊÄßÁöÑÂ∞ÜÂÖÉÁ¥†ÈõÜÂêà‰ª• Observable ÁöÑÂΩ¢ÊÄÅÂèëÈÄÅÂá∫Êù•„ÄÇ
     ÂêåÊó∂ buffer Ë¶ÅÁ≠âÂà∞ÂÖÉÁ¥†ÊêúÈõÜÂÆåÊØïÂêéÔºåÊâç‰ºöÂèëÂá∫ÂÖÉÁ¥†Â∫èÂàó„ÄÇËÄå window ÂèØ‰ª•ÂÆûÊó∂ÂèëÂá∫ÂÖÉÁ¥†Â∫èÂàó„ÄÇ
    */
    
    func windowTest() -> Void {
        let subject = PublishSubject<String>()
        subject
            .window(timeSpan: DispatchTimeInterval.seconds(1), count: 3, scheduler: MainScheduler.instance)
            .subscribe(onNext: { [weak self](observable) in
                
                print("subscrible : \(observable)")
                observable.asObservable()
                    .subscribe(onNext: {print($0)})
                    .disposed(by: self!.disposeBag);
                
        }).disposed(by: disposeBag)
        
        subject.onNext("a")
        subject.onNext("b")
        subject.onNext("c")
        
        subject.onNext("1")
        subject.onNext("2")
        subject.onNext("3")
    }
    
    /**
     7ÔºåconcatMap
     Ôºà1ÔºâÂü∫Êú¨‰ªãÁªç
     concatMap ‰∏é flatMap ÁöÑÂîØ‰∏ÄÂå∫Âà´ÊòØÔºöÂΩìÂâç‰∏Ä‰∏™ Observable ÂÖÉÁ¥†ÂèëÈÄÅÂÆåÊØïÂêéÔºåÂêé‰∏Ä‰∏™Observable ÊâçÂèØ‰ª•ÂºÄÂßãÂèëÂá∫ÂÖÉÁ¥†„ÄÇÊàñËÄÖËØ¥Á≠âÂæÖÂâç‰∏Ä‰∏™ Observable ‰∫ßÁîüÂÆåÊàê‰∫ã‰ª∂ÂêéÔºåÊâçÂØπÂêé‰∏Ä‰∏™ Observable ËøõË°åËÆ¢ÈòÖ„ÄÇ
     */
    func concatMap() -> Void {
        let subject1 = BehaviorSubject(value: "A")
        let subject2 = BehaviorSubject(value: "1")
        
        let variable = BehaviorRelay(value: subject1)
        
        variable.asObservable()
            .concatMap { $0 }
            .subscribe(onNext: { print($0) })
            .disposed(by: disposeBag)
        
        subject1.onNext("B")
        variable.accept(subject2)
        subject2.onNext("2")
        subject1.onNext("C")
        subject1.onCompleted() //Âè™ÊúâÂâç‰∏Ä‰∏™Â∫èÂàóÁªìÊùüÂêéÔºåÊâçËÉΩÊé•Êî∂‰∏ã‰∏Ä‰∏™Â∫èÂàó
    }
    
    /**
     8Ôºåscan
     Ôºà1ÔºâÂü∫Êú¨‰ªãÁªç
     scan Â∞±ÊòØÂÖàÁªô‰∏Ä‰∏™ÂàùÂßãÂåñÁöÑÊï∞ÔºåÁÑ∂Âêé‰∏çÊñ≠ÁöÑÊãøÂâç‰∏Ä‰∏™ÁªìÊûúÂíåÊúÄÊñ∞ÁöÑÂÄºËøõË°åÂ§ÑÁêÜÊìç‰Ωú„ÄÇ
     */
    
    func scanTest() -> Void {
        Observable.of(1, 2, 3, 4, 5)
            .scan(0) { acum, elem in
                acum + elem
            }
            .subscribe(onNext: { print($0) })
            .disposed(by: disposeBag)
    }
    
    /**
     9ÔºågroupBy
     Ôºà1ÔºâÂü∫Êú¨‰ªãÁªç
     groupBy Êìç‰ΩúÁ¨¶Â∞ÜÊ∫ê Observable ÂàÜËß£‰∏∫Â§ö‰∏™Â≠ê ObservableÔºåÁÑ∂ÂêéÂ∞ÜËøô‰∫õÂ≠ê Observable ÂèëÈÄÅÂá∫Êù•„ÄÇ
     ‰πüÂ∞±ÊòØËØ¥ËØ•Êìç‰ΩúÁ¨¶‰ºöÂ∞ÜÂÖÉÁ¥†ÈÄöËøáÊüê‰∏™ÈîÆËøõË°åÂàÜÁªÑÔºåÁÑ∂ÂêéÂ∞ÜÂàÜÁªÑÂêéÁöÑÂÖÉÁ¥†Â∫èÂàó‰ª• Observable ÁöÑÂΩ¢ÊÄÅÂèëÈÄÅÂá∫Êù•„ÄÇ
     */
    
    func groupByTest() -> Void {
        Observable<Int>.of(0,1,2,3,4,5).groupBy { (element) -> String in
            
            return element % 2 == 0 ? "ÂÅ∂Êï∞" : "Âü∫Êï∞"
            
            }
            .subscribe(onNext: { [weak self] (groupObservable) in
                
                groupObservable.subscribe(onNext: { (num) in
                    
                    print("groupObservable key: \(groupObservable.key)  num : \(num)")
                    
                }).disposed(by: self!.disposeBag)
                
            }).disposed(by: disposeBag)
    }
}

